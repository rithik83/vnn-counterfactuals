from maraboupy import Marabou
import numpy as np
from torchvision import datasets, transforms

train_set = datasets.MNIST('./data', train=True, download=True)
test_set = datasets.MNIST('./data', train=False, download=True)

train_set_array = train_set.data.numpy()
test_set_array = test_set.data.numpy()

print(train_set_array[0:1].flatten().shape)

options = Marabou.createOptions(verbosity = 0, timeoutInSeconds=10)

filename = 'models/classically_trained.onnx'
# filename = 'models/adv_pgd_strong.onnx'
# filename = 'models/adv_pgd_medium.onnx'
# filename = 'models/adv_pgd_weak.onnx'
# network = Marabou.read_onnx(filename)

# inputVars = network.inputVars[0][0]
# outputVars = network.outputVars[0][0]

epsilon = 0.05
# image = train_set_array[index: index + 1].flatten() / 255
# correct_class = train_set.targets.numpy()[index]

image = [0.0, 0.0, 2.8196112862133307e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001926719298353419, 0.0003155409169266932, 0.0, 7.07615690316743e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00012243101709827898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003461316850007279, 0.0, 0.23081962402388292, 0.0004974872179445811, 0.7799423301949202, 0.39930371756846317, 0.0, 0.0008304941098563405, 0.00030025915402802643, 0.2671136955735161, 0.4479166886990838, 0.4741017845200706, 0.6271294459681475, 0.00031788497164961883, 0.08587984715724781, 0.000649309711297974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20424534473297015, 0.12499592574021548, 0.12029182319458467, 0.1786983373814285, 0.8554574308908952, 0.7325200530529224, 0.4588616188376164, 0.7355476924500193, 0.20933514673215023, 0.6195959204022873, 1.0, 0.6030333855216952, 0.0, 0.0, 0.0, 0.6344173015350569, 0.4046714830247027, 0.2734846864072196, 0.9999996045249864, 0.29513024671802385, 0.0, 0.0003065276196139166, 9.453050206502667e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003218769103114028, 0.0, 0.00074209755694028, 0.8650510403267924, 0.0, 0.09054365959705299, 0.0001577245693624718, 0.41222109491969267, 0.34290712280557395, 0.27337516098024045, 0.5873077483634785, 0.0, 0.0, 0.0, 0.0, 0.0005251588178216479, 0.0, 0.0, 0.00026677936787018546, 0.0, 0.0, 0.00026390373523099697, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2038124363561787, 0.5229927499254391, 0.18452385643807714, 0.0002742850983850076, 8.437243723165012e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00021761333628091963, 0.0, 0.00019374747471374577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0703219200329219, 0.0, 1.6930069205045583e-5, 0.0, 0.0, 9.660524849459755e-5, 0.0, 0.0006015050434143633, 0.0, 3.4635157498996703e-5, 0.00011854824861075032, 0.0, 0.0, 0.0, 0.015403894121178626, 0.11365751289941013, 0.11384352659753293, 0.5022721311418933, 0.800054598269194, 0.9924206896621942, 0.9912737109719877, 0.99305654819621, 0.24702174647429764, 0.0, 0.0, 0.0, 0.0, 5.662116745952517e-5, 0.39182158244277177, 0.00016041464568843368, 0.0, 0.00032016400582506326, 0.0, 0.00015450689263525413, 0.0001764631042751717, 0.0006275768053455977, 0.0, 0.0001316659927397268, 3.5917300010623876e-5, 0.0, 0.0003351239860421629, 0.20019103110626227, 0.5020111105377658, 0.9887646206138013, 0.9871065552170094, 0.988646482667634, 0.9918494323019842, 0.9877422445027524, 0.9872571843050685, 0.9881169518696598, 0.444155570352339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.24155855873332027, 0.0, 0.34955860098536407, 0.000165766660211375, 0.0003773953912968864, 0.0, 0.0, 0.07483810899153895, 0.6752868819509098, 0.9638003822961344, 0.9912169423860003, 0.9880161587274624, 0.987275411215305, 0.6930385073670349, 0.41568804452667013, 0.21873832250095934, 0.2199324351390623, 0.9060402307928909, 0.4435928028761397, 0.07459651348199559, 0.3321335227651443, 0.03835187770769156, 0.0, 0.00018417872925056145, 0.0, 0.0004980035613698419, 0.00039200983919727154, 0.0, 0.00013047228521827494, 0.0, 0.051394909587121416, 0.0, 0.0, 0.0, 0.05071609591837459, 0.7606360842095603, 0.9893645850802792, 0.9885900182354425, 0.9452029363864696, 0.45131218063833817, 0.10894051343074397, 0.011970817673375215, 0.0, 0.0, 2.2568201620742913e-5, 0.6866427084146007, 0.2987316247592534, 0.7601696237136646, 0.9877817024279726, 0.1099867491577275, 0.0, 0.0, 0.0, 0.0003238630819396349, 0.0001096387666329973, 0.0, 0.0, 0.11816278720173753, 0.00017991798449656926, 0.0, 0.0, 0.0, 0.5532310584948614, 0.9921003671525515, 0.9570573167903178, 0.49143782252277124, 0.20020617444553063, 0.0, 0.0, 0.0001388134423905285, 0.0, 0.00029700133000005736, 1.1161161228301353e-5, 0.05053446166789525, 0.8008578511127808, 0.9928897710629939, 0.9059964534260907, 0.09854590095358164, 0.0, 0.0, 5.9029268959420735e-5, 0.00031907324118947146, 0.09041380807113726, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5536480711304044, 0.9889794204325382, 0.7332164704217785, 0.027133545126938587, 0.0, 0.0, 0.0, 0.0003542757604918734, 0.0004054066743265139, 0.0, 0.07434720595620688, 0.7602071187749212, 0.9918261638669532, 0.8386046327688035, 0.07316944717066921, 0.00015355471514340026, 8.279796529677697e-5, 0.0, 0.0, 0.0, 0.0, 0.0003385069569048938, 0.0, 0.00023843708877393512, 0.0, 0.0, 0.0, 0.0, 0.5523496688545958, 0.9887067295729661, 0.9871171971666335, 0.25475646900500293, 0.0, 0.0, 0.0, 4.6301484690047805e-5, 0.000262496441246185, 0.3220245982656331, 0.8439716699876112, 0.9875845594850765, 0.9560681145543354, 0.31723832105894745, 0.0, 0.0, 0.0, 0.0, 6.877215091662948e-5, 0.0, 0.0, 0.0002254889348478173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087599023759358, 0.8425411006819563, 0.9877962495510073, 0.940619050268086, 0.1983313985409948, 0.0, 0.0, 0.0, 0.6899034946735043, 0.9529694426103015, 0.988022497791131, 0.9868959655527352, 0.29454824082076514, 0.0, 0.0, 0.0, 6.334315012281878e-5, 0.0, 2.4572844267822805e-6, 0.0, 0.0004163883426372195, 0.0, 0.0, 0.39969224717857943, 0.0, 0.00017284647401538678, 0.0, 0.0, 0.0, 0.4705403871560838, 0.9905835717762325, 0.9916082749175865, 0.9994853752388735, 0.6981535364402632, 0.6980558358005208, 0.992124372700024, 1.0, 0.9922133603946759, 0.9928979280648853, 0.5008055721427865, 0.0, 0.0, 0.061264002801453284, 0.1647059204048437, 0.0, 0.0, 0.0, 0.0, 0.0002953874694867409, 0.0, 0.00012406407372327516, 0.08366702624172423, 0.0, 0.0, 0.000181993265687197, 0.0, 0.0, 0.5130009712801654, 0.768103694982216, 0.9644077537209218, 0.9925407606861263, 0.9882817405336706, 0.9883052349923184, 0.9877248954145266, 0.9917858926489761, 0.9877782966504179, 0.6667405234791774, 0.03603831183625451, 0.0, 0.0005116878863191233, 0.0, 8.455397182842717e-5, 0.0, 0.0, 0.0, 0.00013448156787490006, 0.0002020938014084095, 0.0, 0.00023439116430381548, 4.64721394564549e-5, 0.10585293976476512, 0.0, 0.0, 0.0001233762024639873, 0.0, 0.0, 0.0, 0.5377509198397874, 0.9922278209002301, 0.9883955680275929, 0.9879683380553022, 0.6933645210143681, 0.21990741086227292, 0.22090604585341236, 0.05083992401906109, 0.0003875119975418784, 0.00040637600541231227, 0.0005403970113547985, 0.0, 0.0, 0.04560722500264229, 0.0, 0.0, 0.00020133699308644282, 0.0, 0.0, 0.0, 0.0, 0.0001885218216775684, 0.00013093932866468095, 0.0, 0.0, 0.00018076731939800086, 0.10141058800960806, 0.44334781435546333, 0.8831393532250548, 0.9916472672503778, 0.9881231964607432, 0.9888115204967921, 0.11058259239183194, 0.0, 0.0, 0.00023777929036441494, 0.0004164068563113688, 0.00021607138660328928, 6.73315455969714e-5, 0.0, 0.0, 0.5059372314935275, 0.0, 0.0, 7.339767657867925e-5, 0.00010852054665519973, 0.0, 0.0, 0.0, 0.0, 0.0, 7.080280920490623e-5, 0.0510226667989273, 0.3608844517288771, 0.8472431271940914, 0.9916852867384497, 0.8949969394510469, 0.49314110718877524, 0.9563169224610139, 0.9931574334777562, 0.10887113913009826, 0.0, 9.081046991923359e-5, 0.0004357422907560249, 0.0, 0.0, 5.8835771960730204e-5, 0.0, 0.0, 0.0008619147611170774, 0.0, 0.0, 3.542854119586991e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07507207895619353, 0.7615712186104764, 0.9920809480367414, 0.988003003587304, 0.8160156500672805, 0.08610143150239204, 0.0002685265790205449, 0.6634225832800171, 0.9891929498529172, 0.40342270360171656, 0.0, 0.0, 0.0, 0.0, 9.111223607760621e-5, 0.0, 0.0, 0.0, 0.34546592769921575, 0.0, 0.0, 0.0, 5.329339019226609e-5, 0.00042960369429783876, 0.00010140590638911817, 0.0, 0.0, 0.17642192535121273, 0.8430079854238737, 0.9881118587834966, 0.9576704320229238, 0.5562474640561149, 0.05134871077289339, 0.0, 0.00023832595707062865, 0.6640643198430173, 0.9894358820044118, 0.5456768342597565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.415323293131628, 0.0, 0.0, 0.0, 0.0, 2.7347849245414925e-6, 0.00012252989399712534, 0.0, 0.0, 0.6166367820825618, 0.9876182510767955, 0.792089050678208, 0.29424366834156046, 0.0, 2.450919073453406e-5, 0.0, 0.0, 0.6627673699772741, 0.9881377054654495, 0.5443954796683471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11450436334506951, 0.9907230726511036, 0.8475197147731439, 0.06188055581431882, 0.000141881831586943, 0.0, 0.0, 0.0, 0.11410729934425512, 0.8470169571606075, 0.9923376298389078, 0.11015605068001695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003154780172044411, 4.082921955159691e-5, 0.0, 0.0, 0.0002459475549585477, 0.0, 0.0, 0.08586905729377452, 0.9181011742375932, 0.9881915859183544, 0.6981860694899816, 0.22318766926167505, 0.22278220404613402, 0.22327502685806197, 0.22289383555593026, 0.847598002925363, 0.9875421200674573, 0.9146467342773328, 0.0870842211554441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002169402017898392, 0.0, 0.0004820549031137489, 0.0, 0.0, 6.803079322708072e-5, 0.0, 0.0, 0.0, 0.0, 0.321898654062626, 0.9886825005965069, 0.9877905534725863, 0.9917018196243957, 0.987137281282798, 0.9876329959776275, 0.9873555446075637, 0.9917202634549807, 0.9144312256439924, 0.24303045062179823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031817250894528113, 0.0, 0.0, 0.0, 0.0003710960547323339, 0.0, 0.00021355389762902635, 0.00035595487915998094, 0.028615152165621358, 0.11046371556600791, 0.5019940382950975, 0.5483359537884727, 0.6472739845530979, 0.9876206258936149, 0.5919049108207214, 0.5016246609612213, 0.08563020855158468, 9.095232517211117e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00030766721974941904, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0167509015897903, 0.43953301586742066, 1.2613141734618694e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 5.509321199497208e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00024753822281127215, 0.0, 0.0, 0.0, 0.0, 4.6541732149307795e-5, 0.0, 0.0, 0.07853614936379526, 0.3666952786797406, 0.0006059022649424151, 0.0, 3.123483083982137e-5, 0.0, 0.0, 0.00046452528986264954, 0.00043313676760590173, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002941715303677484, 0.00012618882437891445, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0007946033794723917, 0.00014188989571266576, 0.0004207276349916356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.396429290973174e-5, 0.0, 0.0, 0.0, 0.0]
correct_class = 6

print("correct class: ", correct_class)


# for j in range(len(inputVars)):
#     network.setLowerBound(inputVars[j], max(image[j] - epsilon, 0))
#     network.setUpperBound(inputVars[j], min(image[j] + epsilon, 1))

margin = -0.00001

for i in range(10):
  print("i: ", i)
  if i != correct_class:
    network = Marabou.read_onnx(filename)

    inputVars = network.inputVars[0][0]
    outputVars = network.outputVars[0][0]

    for j in range(len(inputVars)):
      network.setLowerBound(inputVars[j], max(image[j] - epsilon, 0))
      network.setUpperBound(inputVars[j], min(image[j] + epsilon, 1))

    network.addMaxConstraint(set(outputVars), outputVars[i])
    network.addInequality([outputVars[correct_class], outputVars[i]], [1, -1], margin)
    exit_code, vals, stats = network.solve(verbose = False, options = options)

    print(exit_code)

    print("satisfiability? ", exit_code)

    # if solution found, break
    if len(vals) > 0:
      for j, var in enumerate(outputVars):
        print(f"output {j}: {vals[var]}")
      print(f"maxclass: {i}")
      inputPoint = np.zeros((1, 784))
      for j, var in enumerate(inputVars):
        inputPoint[0][j] = vals[j]
      
      meval = network.evaluateWithMarabou(inputPoint, options = options)[0]
      onnxeval = network.evaluateWithoutMarabou(inputPoint)[0]

      print("marabou eval: ", meval)
      print("onnx eval: ", onnxeval)
      
      break










# print("\nConvolutional Network with Max Pool Example")
# filename = 'resources/classic_cnn.onnx'
# network = Marabou.read_onnx(filename)

# # # %%
# # Get the input and output variable numbers; [0] since first dimension is batch size
# inputVars = network.inputVars[0]
# outputVars = network.outputVars[0]

# # %% 
# # Test Marabou equations against onnxruntime at an example input point
# inputPoint = np.zeros(inputVars.shape)
# print("inputvars shape: ", inputVars.shape)
# marabouEval = network.evaluateWithMarabou([inputPoint], options = options)[0]
# onnxEval = network.evaluateWithoutMarabou([inputPoint])[0]

# # # %%
# # The two evaluations should produce the same result
# print("Marabou Evaluation:")
# print(marabouEval)
# print("\nONNX Evaluation:")
# print(onnxEval)
# print("\nDifference:")
# print(onnxEval - marabouEval)
# assert max(abs(onnxEval - marabouEval).flatten()) < 1e-3


# print("\nConvolutional Network Example")
# filename = 'resources/KJ_TinyTaxiNet.onnx'
# network = Marabou.read_onnx(filename)

# # %%
# # Get the input and output variable numbers; [0] since first dimension is batch size
# inputVars = network.inputVars[0][0]
# outputVars = network.outputVars[0][0]

# # %%
# # Setup a local robustness query
# delta = 0.03
# for h in range(inputVars.shape[0]):
#     for w in range(inputVars.shape[1]):
#         network.setLowerBound(inputVars[h][w][0], 0.5-delta)
#         network.setUpperBound(inputVars[h][w][0], 0.5+delta)

# # %%
# # Set output bounds
# network.setLowerBound(outputVars[0], 6.0)

# # %%
# # Call to Marabou solver (should be SAT)
# print("Check query with less restrictive output constraint (Should be SAT)")
# exitCode, vals, stats = network.solve(options = options)
# assert( exitCode == "sat")
# assert len(vals) > 0

# print("vals: ", vals)

# # %%
# # Set more restrictive output bounds
# network.setLowerBound(outputVars[0], 6.55)

# # %%
# # Call to Marabou solver (should be UNSAT)
# print("Check query with more restrictive output constraint (Should be UNSAT)")
# exitCode, vals, stats = network.solve(options = options)
# assert( exitCode == "unsat")
# assert len(vals) == 0