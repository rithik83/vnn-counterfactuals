from maraboupy import Marabou
import numpy as np
from torchvision import datasets, transforms

train_set = datasets.MNIST('./data', train=True, download=True)
test_set = datasets.MNIST('./data', train=False, download=True)

train_set_array = train_set.data.numpy()
test_set_array = test_set.data.numpy()

print(train_set_array[0:1].flatten().shape)

options = Marabou.createOptions(verbosity = 0, timeoutInSeconds=10)

# filename = 'models/classically_trained.onnx'
# filename = 'models/adv_pgd_strong.onnx'
filename = 'models/adv_pgd_medstr.onnx'
# filename = 'models/adv_pgd_medium.onnx'
# filename = 'models/adv_pgd_weak.onnx'
# network = Marabou.read_onnx(filename)

# inputVars = network.inputVars[0][0]
# outputVars = network.outputVars[0][0]

epsilon = 0.05
# image = train_set_array[index: index + 1].flatten() / 255
# correct_class = train_set.targets.numpy()[index]

image = [0.0, 4.1791768799370745e-6, 0.0, 9.113099119772983e-6, 0.0, 0.0, 5.415345970671837e-6, 5.58029875916688e-6, 1.1853856818433428e-5, 3.011585485523938e-6, 0.0, 1.37436050241746e-5, 0.0, 5.792820971262103e-6, 9.46021372651984e-6, 8.41482145101935e-6, 9.14579892299372e-6, 1.1804585693386827e-5, 7.415320626158462e-6, 4.0694096636428865e-6, 0.0, 0.0, 7.211876858548295e-6, 5.759454918763396e-6, 7.649643171880883e-6, 5.834413692440421e-6, 0.0, 4.8785614692903325e-6, 6.556836086613061e-6, 0.0, 1.259954452947909e-5, 0.0, 6.18912457159837e-6, 0.0, 7.097680887291347e-6, 0.0, 8.363229339192202e-6, 5.747375791731457e-6, 9.565300774827535e-6, 2.0377788826131392e-6, 0.0, 8.75960425696931e-6, 1.3397699958517251e-5, 5.8718944734081905e-6, 8.204537743328188e-6, 0.0, 5.742910469574981e-6, 9.86433021008537e-6, 9.268664011319318e-6, 6.036848346813173e-6, 1.1026214669662694e-5, 0.0, 4.8407267800421046e-6, 7.5411310397122126e-6, 1.5949119477198794e-5, 6.640561291781921e-6, 0.0, 7.759822933639527e-6, 9.75754543048879e-6, 7.538618593194713e-6, 1.4102268098170612e-5, 5.691138064101154e-6, 1.0901802680862717e-5, 0.0, 1.2700437723545123e-5, 1.465201187222931e-6, 0.0, 0.0, 2.3196994424878883e-6, 7.816484063738472e-6, 9.5905369756899e-6, 2.0155041609726257e-5, 0.0, 2.2597167031079835e-5, 0.0, 0.0, 1.5747042841596227e-5, 0.0, 1.2255090208412867e-5, 1.158047251159644e-5, 0.0, 0.0, 1.3309428941532532e-5, 1.0118847531614961e-5, 1.3784851970299884e-5, 0.0, 6.0224042200296425e-6, 4.368237663854302e-6, 0.0, 3.930642401162032e-6, 7.083182630651663e-6, 6.4063199713970675e-6, 1.622747983613948e-5, 9.038264889760228e-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.052620894816727e-6, 0.0, 3.0320011737217102e-5, 2.5045762659203777e-5, 1.7167127768757952e-5, 0.0, 5.121280972453235e-6, 2.9974181952496794e-6, 9.44565250335927e-6, 6.578116177280436e-6, 1.0722244294925077e-5, 0.0, 1.2135385639666652e-5, 0.0, 1.2411885999252804e-5, 1.2539060148419878e-5, 1.2517600596595458e-5, 0.37584507854925275, 1.0, 0.9652774889699188, 0.5024283405717661, 0.19889507735924974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.060448748541944e-5, 2.0267402912566013e-5, 1.8795998477472156e-5, 1.7354282105408458e-5, 9.681016727647319e-6, 7.874953447029042e-6, 1.1293699846959271e-5, 7.097356948904121e-6, 9.739181690004983e-6, 6.582143980260469e-6, 9.569165708356309e-6, 8.875666885543865e-6, 0.0, 2.9875553509839394e-5, 0.0, 0.9645224218027167, 0.748286386163967, 0.9958552307299563, 0.9948674534518539, 0.9724177376656218, 0.14883706735440777, 0.00014400478485185886, 0.0, 0.2855877595807294, 0.2747515729985487, 0.00031972645076621124, 1.9771230569176622e-6, 3.888707809096559e-7, 1.2952712765468278e-6, 0.0, 9.63776169333741e-6, 2.281110767192729e-5, 1.2798132192237688e-5, 5.283246974308043e-6, 3.933052954696592e-6, 8.536399320124844e-6, 9.119966421700099e-6, 1.0127089176670268e-5, 1.4968006730242678e-5, 4.188809713934205e-6, 7.363534928117588e-6, 0.0, 0.0, 0.41187030238874195, 0.6078261851897442, 0.9014911133933845, 0.9682020037128699, 0.9970797929087228, 0.6325633585665073, 0.021098058886659554, 9.119058195688015e-5, 0.0008474555935208628, 0.0, 0.0004940388311752031, 0.00034937997811539394, 0.0, 0.00015691835630278207, 0.0, 0.0, 4.914809719913649e-6, 0.0, 0.0, 8.84812422388137e-6, 0.0, 1.3280646235180882e-5, 1.1757512817034411e-5, 1.0357017783135803e-5, 3.0437742061906195e-6, 0.0, 0.0, 0.0, 0.0, 0.0, 4.3384262944812235e-5, 0.32976426364921596, 0.9970080706461059, 0.9976152188131597, 0.44784016466391, 0.0007012821573653127, 0.0, 0.2039534789759527, 0.000587517940242833, 0.0, 0.0, 0.0004008571279683793, 0.0, 1.9691302173896475e-5, 0.0, 0.0, 1.623433242148309e-5, 7.4380344207369836e-6, 7.923927292097233e-6, 0.0, 4.134028976388038e-6, 0.0, 1.775592851558372e-5, 0.0, 0.0, 0.00012994802137029638, 0.00030665863146168705, 0.0, 0.0, 0.0, 0.5384090368050584, 0.9966509626877421, 0.6672645698558363, 0.38324235570047666, 0.2669665865356938, 0.5662422584455502, 0.3202806252847421, 0.00045749362245430805, 0.0, 0.0, 0.0, 0.0, 0.0, 4.356541839545258e-6, 3.203083699432341e-6, 0.0, 6.809577153976676e-6, 7.159596801198376e-6, 2.307592489181332e-6, 0.0, 3.211545736263588e-5, 8.482248315431207e-5, 7.092003585853491e-5, 0.0, 0.0003271347517454615, 0.00044630593891668017, 0.0004988239183091992, 0.0, 0.12593154719125227, 0.8781493193440093, 0.9948739591678116, 0.6003722756385172, 0.283726406077072, 0.7665719747422062, 0.3305080671543651, 0.0, 0.0, 2.703864422528568e-5, 0.0, 0.0, 5.8272749081211834e-6, 4.597804540118489e-6, 9.375658992105685e-6, 1.1466879881538718e-5, 6.304272207735551e-6, 9.693041024583238e-6, 5.15476699494144e-6, 0.0, 2.5663866903613552e-5, 0.0, 0.0001244717724318889, 0.0, 0.09683061164938833, 0.7964795424427953, 0.0005662915250695732, 0.0, 0.0, 0.4638160345096994, 0.7711856699991338, 0.6320084817685957, 1.4468403193859496e-5, 0.26225376492606434, 0.8129251495672143, 0.18082364727598585, 0.0, 0.00027671458452687147, 0.00011143634569634742, 0.0, 0.0, 0.0, 0.0, 6.139647258063264e-6, 4.529370444750214e-6, 7.229827598731476e-6, 0.0, 0.0, 0.0, 0.0, 0.0002500975678742634, 0.0, 1.0, 1.0, 0.0005289539893510664, 0.0, 0.0, 0.11670688953271173, 0.9286397526398248, 0.6305075287287462, 0.0, 0.0008651576366219161, 0.3873508680595434, 0.0003848505886708154, 0.00015166020983770068, 0.17139765953016278, 0.0, 0.0, 0.0, 4.609988438719626e-6, 6.835801274629461e-6, 9.467893641357251e-6, 1.1887665104026724e-5, 8.801553460280331e-6, 1.0751892522442576e-5, 6.185176406958704e-6, 1.6766623092223656e-5, 0.00013514667110712253, 0.0, 0.06576978052606189, 1.0, 0.4732602260867136, 0.0, 0.0, 0.0, 0.0, 0.7206388624241086, 0.8661369129366404, 0.0007098926387016036, 0.0010101674123916382, 0.0003671530343410723, 0.0, 0.00014676859745463844, 0.43093895580300945, 1.0, 0.0, 0.0, 4.150777323985722e-6, 3.8004708361683016e-6, 6.268351091875957e-6, 8.952516644811226e-6, 0.0, 6.2602919467025234e-6, 2.5522494510710206e-6, 5.878591373686959e-6, 0.0, 0.0, 0.3441680806929982, 0.24159367002836704, 0.08033767300563839, 0.00035704055821952354, 0.000293827248094658, 4.5048956212667694e-5, 0.0, 0.45365392329210175, 0.7861173862950191, 0.0003726442606080127, 0.00041290246036282955, 0.0, 0.0, 0.0, 0.00011635010122768111, 1.0, 0.0, 0.0, 1.3228741054405192e-5, 8.552097880087928e-6, 7.1708185473085e-6, 6.990097074321966e-6, 5.56192258285293e-6, 6.3101504929719006e-6, 0.0, 2.5729415239794664e-5, 0.13323033332658585, 0.22090598432785596, 0.9997285410930876, 0.5031988090194806, 4.919610117804039e-5, 0.0, 0.0, 0.0, 0.0, 0.45455090836081896, 0.9946984988723466, 0.0, 0.0, 0.0, 0.0, 7.949911308173796e-5, 2.3492232496891922e-5, 1.0, 0.0, 2.475973829412226e-5, 8.915459742908638e-6, 5.3328870581736965e-6, 7.090897020933795e-6, 2.585766941898271e-6, 7.634959254421149e-6, 9.860499460856432e-6, 0.0, 5.500151548858412e-5, 0.06056910785346813, 1.0, 0.9994414902451003, 0.567756011978385, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4546888882246874, 0.7659950527294128, 0.0, 0.0, 0.0, 0.00025158996249956543, 0.0, 0.034055901610708726, 0.00018210331118575596, 2.3145166821336716e-5, 5.598724021815827e-6, 0.0, 9.58299535547269e-6, 0.0, 1.079445435845372e-5, 5.046266594277427e-6, 6.908890100199017e-6, 0.0, 0.00019074830590284366, 0.6711464660457529, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14122672631994693, 0.31702865078807574, 0.9015246641212302, 0.5681208550929313, 0.14854625178120595, 0.0, 0.00025643498021850065, 0.0, 9.636426655958986e-5, 0.0, 0.0, 1.163356086628653e-5, 1.1424791461678298e-5, 5.878154724925367e-6, 7.1363004333413475e-6, 0.0, 9.976029954117394e-6, 4.855833084604911e-6, 0.0003048114127409463, 0.7554562846035414, 0.1393601346568753, 0.0008971239397245654, 0.0010907093756941323, 0.0, 0.00019482829081971434, 0.0005046866958546162, 0.0, 0.0, 0.09745142033517357, 0.9292040259205278, 0.9957516689370473, 0.9966702698872829, 0.9224681979696222, 0.21667745996800056, 0.0, 0.00017922712309541568, 0.0, 1.5237578659821338e-5, 0.0, 0.0, 0.0, 9.85575505758618e-6, 0.0, 5.774371401923162e-6, 0.0, 0.0, 0.0, 0.6285128057262747, 0.057731351266036686, 0.0017635851841760087, 0.002237882325789542, 0.11814073343269232, 0.07925727112245759, 0.0025543434587470986, 0.0013303571884457598, 0.047346213040014254, 0.8852490470006859, 0.11361222093563816, 0.2777037610041525, 0.41149727500170546, 0.7054127048203506, 0.9063718300177773, 0.0, 0.0, 4.081765767338652e-5, 0.0, 1.4979232506817653e-6, 7.469423629302697e-6, 8.142888200968201e-6, 5.945652305072713e-6, 6.669399463721249e-6, 3.561805223473158e-6, 0.0, 7.607836877809859e-6, 0.0, 0.31871361052394637, 0.000177214395953797, 0.0013100621560852234, 0.0016415533287954531, 0.809813000445829, 0.9631021712133868, 0.1729054770916088, 0.00020069683289420938, 0.6742172877806504, 0.4114515374342598, 0.0, 0.0003975011003717555, 6.405433800296124e-5, 0.0, 0.20005812001749088, 0.0, 1.4748657693530732e-5, 0.0, 0.0, 0.0, 0.0, 4.742769482746212e-6, 4.526354390677057e-6, 6.758283792063225e-6, 1.0772117502000356e-5, 1.4296104681221778e-5, 2.624263737587285e-5, 0.0, 0.0004332068563826397, 0.0610371465567153, 0.09823763636308804, 0.6873955978573918, 0.9647138990881489, 0.18023714524265166, 0.0, 0.2165241945136884, 0.7837853573359789, 0.0673094144297534, 0.0005229084321740629, 0.0, 0.0, 0.0, 0.0, 0.0, 4.294472923405124e-5, 1.0577739123007746e-5, 6.889739254578587e-6, 1.33066612608701e-5, 8.962927116851204e-6, 0.0, 0.0, 0.0, 1.1653047440418618e-5, 1.561251363852989e-5, 0.0, 0.0, 9.193999836725198e-5, 0.019853902544130105, 0.4130263452828459, 0.7887818361417491, 0.9969485536169389, 0.18088385551102146, 0.13441587886897569, 0.8347558401140565, 0.3882414817305103, 0.0005022273764552665, 0.0002638049625829808, 0.0, 0.0, 0.0, 0.0, 5.695692357008398e-5, 0.0, 3.4763856957553685e-6, 0.0, 0.0, 0.0, 9.440403417659837e-6, 0.0, 8.507943417335184e-6, 6.5007117074245e-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0004964594965088054, 0.9488660143984424, 0.9964602139850193, 0.978574258697626, 0.946079364346431, 0.44772300224627026, 0.015261147326897163, 2.1911689883836473e-5, 0.00010282322443799785, 0.0, 0.0, 0.0, 1.6517798514570358e-5, 0.0, 0.0, 5.72484120979766e-6, 1.7126661585820102e-5, 1.0054637433043468e-5, 6.094319929683678e-6, 0.0, 1.1115749132706298e-5, 4.397352067897487e-6, 8.1857262964391e-6, 4.822313146224389e-6, 0.0, 1.9017319041747527e-6, 0.0, 0.0, 0.00013284097954624485, 0.27469855168012747, 0.962019912381569, 0.9961666818658038, 1.0, 0.7591495432484765, 0.4662888962595212, 0.04581628180933281, 0.00023240516310920614, 2.8827514017848444e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3314991777946263e-5, 1.2085015661966736e-5, 7.568653585465768e-6, 8.297495086573292e-6, 1.1184036111089313e-5, 5.5740780181778865e-6, 4.289292742409856e-6, 1.0408091597291503e-5, 6.382167713958609e-6, 6.373582932717171e-6, 1.5183459897905039e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.667391052099902e-6, 0.0, 1.580494048170067e-6, 0.0, 0.0, 6.016393986385538e-6, 0.0, 7.012568336328684e-6, 0.0, 0.0, 5.197217680752431e-6, 9.676695415095084e-6, 8.625911114634732e-6, 8.109810453404975e-6, 0.0, 9.575545201201408e-6, 1.0243065251636097e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.802000456763153e-5, 0.0, 2.572249400074611e-5, 8.195737515670487e-6, 1.54567569293107e-5, 1.3997030215229246e-5, 1.9440933556325035e-5, 9.931852182010204e-7, 1.1199782320137076e-5, 9.431927820990893e-6, 8.137078714298695e-6, 9.483204798499401e-6, 0.0, 1.1032661484833284e-5, 7.197992609953019e-6, 4.651518517384546e-6, 0.0, 0.0, 7.002554602930644e-6, 2.2742439345080356e-6, 0.0, 0.0, 0.0, 0.0, 1.8846219418833245e-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.753230238765724e-6, 1.6666322647118647e-5, 1.4853210987020305e-5, 5.148919738395819e-6, 6.907962864133311e-6, 0.0, 0.0, 0.0, 0.0, 6.420503056681071e-6, 9.408479734673848e-6, 0.0, 1.7303146977454276e-5, 1.2234927454457534e-5, 0.0, 1.3150589502330945e-5, 7.204826617890348e-6, 7.68129223676084e-6, 3.832962514849215e-6, 3.184381011323012e-6, 5.429969282566561e-6, 8.745855525305047e-6, 0.0, 9.320695176739947e-6, 0.0, 6.73524707845985e-6, 1.6409472459955055e-6, 1.1988211581481779e-5, 0.0, 5.790732430277501e-6, 0.0, 4.249976659043142e-6, 7.037110741947572e-6, 7.142527318748648e-6, 9.460988343779066e-6, 0.0, 5.363065125685296e-6, 4.509981210176762e-6]
correct_class = 0

print("correct class: ", correct_class)


# for j in range(len(inputVars)):
#     network.setLowerBound(inputVars[j], max(image[j] - epsilon, 0))
#     network.setUpperBound(inputVars[j], min(image[j] + epsilon, 1))

margin = -0.00001

for i in range(10):
  print("i: ", i)
  if i != correct_class:
    network = Marabou.read_onnx(filename)

    inputVars = network.inputVars[0][0]
    outputVars = network.outputVars[0][0]

    for j in range(len(inputVars)):
      network.setLowerBound(inputVars[j], max(image[j] - epsilon, 0))
      network.setUpperBound(inputVars[j], min(image[j] + epsilon, 1))

    network.addMaxConstraint(set(outputVars), outputVars[i])
    network.addInequality([outputVars[correct_class], outputVars[i]], [1, -1], margin)
    exit_code, vals, stats = network.solve(verbose = False, options = options)

    print(exit_code)

    print("satisfiability? ", exit_code)

    # if solution found, break
    if len(vals) > 0:
      for j, var in enumerate(outputVars):
        print(f"output {j}: {vals[var]}")
      print(f"maxclass: {i}")
      inputPoint = np.zeros((1, 784))
      for j, var in enumerate(inputVars):
        inputPoint[0][j] = vals[j]
      
      meval = network.evaluateWithMarabou(inputPoint, options = options)[0]
      onnxeval = network.evaluateWithoutMarabou(inputPoint)[0]

      print("marabou eval: ", meval)
      print("onnx eval: ", onnxeval)
      
      break










# print("\nConvolutional Network with Max Pool Example")
# filename = 'resources/classic_cnn.onnx'
# network = Marabou.read_onnx(filename)

# # # %%
# # Get the input and output variable numbers; [0] since first dimension is batch size
# inputVars = network.inputVars[0]
# outputVars = network.outputVars[0]

# # %% 
# # Test Marabou equations against onnxruntime at an example input point
# inputPoint = np.zeros(inputVars.shape)
# print("inputvars shape: ", inputVars.shape)
# marabouEval = network.evaluateWithMarabou([inputPoint], options = options)[0]
# onnxEval = network.evaluateWithoutMarabou([inputPoint])[0]

# # # %%
# # The two evaluations should produce the same result
# print("Marabou Evaluation:")
# print(marabouEval)
# print("\nONNX Evaluation:")
# print(onnxEval)
# print("\nDifference:")
# print(onnxEval - marabouEval)
# assert max(abs(onnxEval - marabouEval).flatten()) < 1e-3


# print("\nConvolutional Network Example")
# filename = 'resources/KJ_TinyTaxiNet.onnx'
# network = Marabou.read_onnx(filename)

# # %%
# # Get the input and output variable numbers; [0] since first dimension is batch size
# inputVars = network.inputVars[0][0]
# outputVars = network.outputVars[0][0]

# # %%
# # Setup a local robustness query
# delta = 0.03
# for h in range(inputVars.shape[0]):
#     for w in range(inputVars.shape[1]):
#         network.setLowerBound(inputVars[h][w][0], 0.5-delta)
#         network.setUpperBound(inputVars[h][w][0], 0.5+delta)

# # %%
# # Set output bounds
# network.setLowerBound(outputVars[0], 6.0)

# # %%
# # Call to Marabou solver (should be SAT)
# print("Check query with less restrictive output constraint (Should be SAT)")
# exitCode, vals, stats = network.solve(options = options)
# assert( exitCode == "sat")
# assert len(vals) > 0

# print("vals: ", vals)

# # %%
# # Set more restrictive output bounds
# network.setLowerBound(outputVars[0], 6.55)

# # %%
# # Call to Marabou solver (should be UNSAT)
# print("Check query with more restrictive output constraint (Should be UNSAT)")
# exitCode, vals, stats = network.solve(options = options)
# assert( exitCode == "unsat")
# assert len(vals) == 0